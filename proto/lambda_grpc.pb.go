// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aws

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LambdaServiceClient is the client API for LambdaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LambdaServiceClient interface {
	CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*LambdaResponse, error)
	TestFunction(ctx context.Context, in *TestFunctionResquest, opts ...grpc.CallOption) (*LambdaResponse, error)
	InvokeFunction(ctx context.Context, in *InvoqueFunctionRequest, opts ...grpc.CallOption) (*LambdaResponse, error)
	SeedLambdaServer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LambdaResponse, error)
	ReceiveEvents(ctx context.Context, in *ReceiveEventRequest, opts ...grpc.CallOption) (LambdaService_ReceiveEventsClient, error)
	UpdateLambda(ctx context.Context, in *UpdateLambdaRequest, opts ...grpc.CallOption) (*LambdaResponse, error)
	DeleteLambda(ctx context.Context, in *DeleteLambdaRequest, opts ...grpc.CallOption) (*LambdaResponse, error)
}

type lambdaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLambdaServiceClient(cc grpc.ClientConnInterface) LambdaServiceClient {
	return &lambdaServiceClient{cc}
}

func (c *lambdaServiceClient) CreateFunction(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*LambdaResponse, error) {
	out := new(LambdaResponse)
	err := c.cc.Invoke(ctx, "/lambda.LambdaService/CreateFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaServiceClient) TestFunction(ctx context.Context, in *TestFunctionResquest, opts ...grpc.CallOption) (*LambdaResponse, error) {
	out := new(LambdaResponse)
	err := c.cc.Invoke(ctx, "/lambda.LambdaService/TestFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaServiceClient) InvokeFunction(ctx context.Context, in *InvoqueFunctionRequest, opts ...grpc.CallOption) (*LambdaResponse, error) {
	out := new(LambdaResponse)
	err := c.cc.Invoke(ctx, "/lambda.LambdaService/InvokeFunction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaServiceClient) SeedLambdaServer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LambdaResponse, error) {
	out := new(LambdaResponse)
	err := c.cc.Invoke(ctx, "/lambda.LambdaService/SeedLambdaServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaServiceClient) ReceiveEvents(ctx context.Context, in *ReceiveEventRequest, opts ...grpc.CallOption) (LambdaService_ReceiveEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LambdaService_serviceDesc.Streams[0], "/lambda.LambdaService/ReceiveEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &lambdaServiceReceiveEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LambdaService_ReceiveEventsClient interface {
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type lambdaServiceReceiveEventsClient struct {
	grpc.ClientStream
}

func (x *lambdaServiceReceiveEventsClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lambdaServiceClient) UpdateLambda(ctx context.Context, in *UpdateLambdaRequest, opts ...grpc.CallOption) (*LambdaResponse, error) {
	out := new(LambdaResponse)
	err := c.cc.Invoke(ctx, "/lambda.LambdaService/UpdateLambda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lambdaServiceClient) DeleteLambda(ctx context.Context, in *DeleteLambdaRequest, opts ...grpc.CallOption) (*LambdaResponse, error) {
	out := new(LambdaResponse)
	err := c.cc.Invoke(ctx, "/lambda.LambdaService/DeleteLambda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LambdaServiceServer is the server API for LambdaService service.
// All implementations should embed UnimplementedLambdaServiceServer
// for forward compatibility
type LambdaServiceServer interface {
	CreateFunction(context.Context, *CreateFunctionRequest) (*LambdaResponse, error)
	TestFunction(context.Context, *TestFunctionResquest) (*LambdaResponse, error)
	InvokeFunction(context.Context, *InvoqueFunctionRequest) (*LambdaResponse, error)
	SeedLambdaServer(context.Context, *emptypb.Empty) (*LambdaResponse, error)
	ReceiveEvents(*ReceiveEventRequest, LambdaService_ReceiveEventsServer) error
	UpdateLambda(context.Context, *UpdateLambdaRequest) (*LambdaResponse, error)
	DeleteLambda(context.Context, *DeleteLambdaRequest) (*LambdaResponse, error)
}

// UnimplementedLambdaServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLambdaServiceServer struct {
}

func (UnimplementedLambdaServiceServer) CreateFunction(context.Context, *CreateFunctionRequest) (*LambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFunction not implemented")
}
func (UnimplementedLambdaServiceServer) TestFunction(context.Context, *TestFunctionResquest) (*LambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestFunction not implemented")
}
func (UnimplementedLambdaServiceServer) InvokeFunction(context.Context, *InvoqueFunctionRequest) (*LambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeFunction not implemented")
}
func (UnimplementedLambdaServiceServer) SeedLambdaServer(context.Context, *emptypb.Empty) (*LambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedLambdaServer not implemented")
}
func (UnimplementedLambdaServiceServer) ReceiveEvents(*ReceiveEventRequest, LambdaService_ReceiveEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveEvents not implemented")
}
func (UnimplementedLambdaServiceServer) UpdateLambda(context.Context, *UpdateLambdaRequest) (*LambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLambda not implemented")
}
func (UnimplementedLambdaServiceServer) DeleteLambda(context.Context, *DeleteLambdaRequest) (*LambdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLambda not implemented")
}

// UnsafeLambdaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LambdaServiceServer will
// result in compilation errors.
type UnsafeLambdaServiceServer interface {
	mustEmbedUnimplementedLambdaServiceServer()
}

func RegisterLambdaServiceServer(s *grpc.Server, srv LambdaServiceServer) {
	s.RegisterService(&_LambdaService_serviceDesc, srv)
}

func _LambdaService_CreateFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaServiceServer).CreateFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lambda.LambdaService/CreateFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaServiceServer).CreateFunction(ctx, req.(*CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaService_TestFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestFunctionResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaServiceServer).TestFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lambda.LambdaService/TestFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaServiceServer).TestFunction(ctx, req.(*TestFunctionResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaService_InvokeFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoqueFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaServiceServer).InvokeFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lambda.LambdaService/InvokeFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaServiceServer).InvokeFunction(ctx, req.(*InvoqueFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaService_SeedLambdaServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaServiceServer).SeedLambdaServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lambda.LambdaService/SeedLambdaServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaServiceServer).SeedLambdaServer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaService_ReceiveEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LambdaServiceServer).ReceiveEvents(m, &lambdaServiceReceiveEventsServer{stream})
}

type LambdaService_ReceiveEventsServer interface {
	Send(*EventResponse) error
	grpc.ServerStream
}

type lambdaServiceReceiveEventsServer struct {
	grpc.ServerStream
}

func (x *lambdaServiceReceiveEventsServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LambdaService_UpdateLambda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaServiceServer).UpdateLambda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lambda.LambdaService/UpdateLambda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaServiceServer).UpdateLambda(ctx, req.(*UpdateLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LambdaService_DeleteLambda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LambdaServiceServer).DeleteLambda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lambda.LambdaService/DeleteLambda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LambdaServiceServer).DeleteLambda(ctx, req.(*DeleteLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LambdaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lambda.LambdaService",
	HandlerType: (*LambdaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFunction",
			Handler:    _LambdaService_CreateFunction_Handler,
		},
		{
			MethodName: "TestFunction",
			Handler:    _LambdaService_TestFunction_Handler,
		},
		{
			MethodName: "InvokeFunction",
			Handler:    _LambdaService_InvokeFunction_Handler,
		},
		{
			MethodName: "SeedLambdaServer",
			Handler:    _LambdaService_SeedLambdaServer_Handler,
		},
		{
			MethodName: "UpdateLambda",
			Handler:    _LambdaService_UpdateLambda_Handler,
		},
		{
			MethodName: "DeleteLambda",
			Handler:    _LambdaService_DeleteLambda_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveEvents",
			Handler:       _LambdaService_ReceiveEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lambda.proto",
}
