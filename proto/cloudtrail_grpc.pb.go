// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aws

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudTrailServiceClient is the client API for CloudTrailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudTrailServiceClient interface {
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (CloudTrailService_GetEventsClient, error)
}

type cloudTrailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudTrailServiceClient(cc grpc.ClientConnInterface) CloudTrailServiceClient {
	return &cloudTrailServiceClient{cc}
}

func (c *cloudTrailServiceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (CloudTrailService_GetEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudTrailService_ServiceDesc.Streams[0], "/cloudtrail.CloudTrailService/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudTrailServiceGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CloudTrailService_GetEventsClient interface {
	Recv() (*CloudTrailEvent, error)
	grpc.ClientStream
}

type cloudTrailServiceGetEventsClient struct {
	grpc.ClientStream
}

func (x *cloudTrailServiceGetEventsClient) Recv() (*CloudTrailEvent, error) {
	m := new(CloudTrailEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudTrailServiceServer is the server API for CloudTrailService service.
// All implementations should embed UnimplementedCloudTrailServiceServer
// for forward compatibility
type CloudTrailServiceServer interface {
	GetEvents(*GetEventsRequest, CloudTrailService_GetEventsServer) error
}

// UnimplementedCloudTrailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCloudTrailServiceServer struct {
}

func (UnimplementedCloudTrailServiceServer) GetEvents(*GetEventsRequest, CloudTrailService_GetEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}

// UnsafeCloudTrailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudTrailServiceServer will
// result in compilation errors.
type UnsafeCloudTrailServiceServer interface {
	mustEmbedUnimplementedCloudTrailServiceServer()
}

func RegisterCloudTrailServiceServer(s grpc.ServiceRegistrar, srv CloudTrailServiceServer) {
	s.RegisterService(&CloudTrailService_ServiceDesc, srv)
}

func _CloudTrailService_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CloudTrailServiceServer).GetEvents(m, &cloudTrailServiceGetEventsServer{stream})
}

type CloudTrailService_GetEventsServer interface {
	Send(*CloudTrailEvent) error
	grpc.ServerStream
}

type cloudTrailServiceGetEventsServer struct {
	grpc.ServerStream
}

func (x *cloudTrailServiceGetEventsServer) Send(m *CloudTrailEvent) error {
	return x.ServerStream.SendMsg(m)
}

// CloudTrailService_ServiceDesc is the grpc.ServiceDesc for CloudTrailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudTrailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudtrail.CloudTrailService",
	HandlerType: (*CloudTrailServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _CloudTrailService_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cloudtrail.proto",
}
