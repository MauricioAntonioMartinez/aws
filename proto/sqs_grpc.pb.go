// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aws

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SQSServiceClient is the client API for SQSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQSServiceClient interface {
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (SQSService_ReceiveMessageClient, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type sQSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSQSServiceClient(cc grpc.ClientConnInterface) SQSServiceClient {
	return &sQSServiceClient{cc}
}

func (c *sQSServiceClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, "/sqs.SQSService/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQSServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/sqs.SQSService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQSServiceClient) ReceiveMessage(ctx context.Context, in *ReceiveMessageRequest, opts ...grpc.CallOption) (SQSService_ReceiveMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &SQSService_ServiceDesc.Streams[0], "/sqs.SQSService/ReceiveMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &sQSServiceReceiveMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SQSService_ReceiveMessageClient interface {
	Recv() (*ReceiveMessageResponse, error)
	grpc.ClientStream
}

type sQSServiceReceiveMessageClient struct {
	grpc.ClientStream
}

func (x *sQSServiceReceiveMessageClient) Recv() (*ReceiveMessageResponse, error) {
	m := new(ReceiveMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sQSServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/sqs.SQSService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sQSServiceClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/sqs.SQSService/DeleteQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQSServiceServer is the server API for SQSService service.
// All implementations should embed UnimplementedSQSServiceServer
// for forward compatibility
type SQSServiceServer interface {
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	ReceiveMessage(*ReceiveMessageRequest, SQSService_ReceiveMessageServer) error
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteResponse, error)
	DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteResponse, error)
}

// UnimplementedSQSServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSQSServiceServer struct {
}

func (UnimplementedSQSServiceServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedSQSServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedSQSServiceServer) ReceiveMessage(*ReceiveMessageRequest, SQSService_ReceiveMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedSQSServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedSQSServiceServer) DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}

// UnsafeSQSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQSServiceServer will
// result in compilation errors.
type UnsafeSQSServiceServer interface {
	mustEmbedUnimplementedSQSServiceServer()
}

func RegisterSQSServiceServer(s grpc.ServiceRegistrar, srv SQSServiceServer) {
	s.RegisterService(&SQSService_ServiceDesc, srv)
}

func _SQSService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQSServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sqs.SQSService/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQSServiceServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQSService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQSServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sqs.SQSService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQSServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQSService_ReceiveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReceiveMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SQSServiceServer).ReceiveMessage(m, &sQSServiceReceiveMessageServer{stream})
}

type SQSService_ReceiveMessageServer interface {
	Send(*ReceiveMessageResponse) error
	grpc.ServerStream
}

type sQSServiceReceiveMessageServer struct {
	grpc.ServerStream
}

func (x *sQSServiceReceiveMessageServer) Send(m *ReceiveMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SQSService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQSServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sqs.SQSService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQSServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SQSService_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQSServiceServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sqs.SQSService/DeleteQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQSServiceServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQSService_ServiceDesc is the grpc.ServiceDesc for SQSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sqs.SQSService",
	HandlerType: (*SQSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler:    _SQSService_CreateQueue_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _SQSService_SendMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _SQSService_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _SQSService_DeleteQueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessage",
			Handler:       _SQSService_ReceiveMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sqs.proto",
}
